<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="## This node fixes projected negative emissions after 2050 in case they are unlikely to occur.%%00010## We make the assumption, that if emissions become negative prior to 2050, this is actually a feature of the %%00010## sector and valid. If, however, emissions only become negative after 2050 - due to the trend -, then %%00010## we revert them to 0.%%00010%%00010# libraries%%00010import pandas as pd%%00010%%00010# input%%00010all_ems = pd.DataFrame(input_table.copy())%%00010%%00010# convert to long table%%00010all_ems = all_ems.melt(id_vars = ['Country', 'Years'])%%00010%%00010# create a column containing a concat of variable and country name%%00010all_ems['conc_name'] = all_ems['variable'] + '$' + all_ems['Country']%%00010%%00010# remove columns no longer needed%%00010all_ems = all_ems.drop(['variable', 'Country'], axis = 1)%%00010%%00010# convert back to wide table%%00010all_ems = all_ems.pivot_table(index = ['Years'], columns = 'conc_name', values = 'value').reset_index()%%00010%%00010# get all emission columns for each country%%00010col_names = [item for item in all_ems.columns if item not in ['Years']]%%00010%%00010# for all columns, check if value in 2050 is positive and value in 2100 is negativ%%00010is_problem = (all_ems.loc[all_ems.Years == 2050, col_names] &gt;= -0.000001).reset_index(drop = True) &amp; (all_ems.loc[all_ems.Years == 2100, col_names] &lt; -0.000001).reset_index(drop = True)%%00010%%00010# select only columns where problem occurs%%00010prob_cols = is_problem.columns.values[is_problem.loc[0, ].values == True]%%00010%%00010# set all the negative values in affected columns to 0%%00010all_ems.loc[all_ems.Years &gt; 2050, prob_cols] = all_ems.loc[all_ems.Years &gt; 2050, prob_cols].where(all_ems.loc[all_ems.Years &gt; 2050, prob_cols] &gt;= 0, 0)%%00010#all_ems[prob_cols] = all_ems[prob_cols].where(all_ems[prob_cols] &gt;= 0, 0)%%00010%%00010# convert to long table%%00010all_ems = all_ems.reset_index()%%00010all_ems = all_ems.drop('index', axis = 1)%%00010all_ems = all_ems.melt(id_vars = ['Years'])%%00010%%00010# restore country column%%00010all_ems['variable'], all_ems['Country'] = all_ems['conc_name'].str.split('$', 1).str%%00010all_ems = all_ems.drop('conc_name', axis = 1)%%00010%%00010# convert to original format%%00010all_ems.Country = all_ems.Country.astype(str)%%00010all_ems.value = all_ems.value.astype('float64')%%00010all_ems.Years = all_ems.Years.astype(str)%%00010all_ems = all_ems.pivot_table(index = ['Country', 'Years'], columns = 'variable', values = 'value').reset_index()%%00010%%00010output_table = all_ems"/>
<entry key="rowLimit" type="xint" value="1000000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Ensure that%%00010emissions projections%%00010make sense"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="1608"/>
<entry key="y-coordinate" type="xint" value="479"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="36"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="11"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
