<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="%%00010import pandas as pd%%00010import numpy as np%%00010%%00010# find rest of world contribution to cumuliative budget%%00010rcp_ems_df = pd.DataFrame(input_table)%%00010rcp_ems_df = rcp_ems_df.set_index('Years')%%00010frac_ch4 = 1.0 - 0.064%%00010frac_n2o = 1.0 - 0.099%%00010frac_so2 = 1.0 - 0.050%%00010frac_co2 = 1.0 - 0.101%%00010non_eu_ems_df = pd.DataFrame([np.arange(1990,2101), rcp_ems_df['CO2[GtC]'].values * frac_co2, rcp_ems_df['CH4[MtCH4]'].values * frac_ch4, rcp_ems_df['N2O[MtN2O-N]'].values * frac_n2o, rcp_ems_df['SOx[MtS]'].values * frac_so2]).T%%00010non_eu_ems_df.columns = ['Years','CO2[GtC]','CH4[MtCH4]','N2O[MtN2O-N]','SOx[MtS]']%%00010non_eu_ems_df = non_eu_ems_df.set_index('Years')%%00010%%00010# define key variables for model%%00010# -----------------------------------%%00010GWP_CH4 = 28.0%%00010GWP_N2O = 265.0%%00010GWP_SO2 = -40.0%%00010H = 100.0%%00010%%00010%%00010# find CO2 equivalent emissions%%00010# -----------------------------------%%00010rest_of_world_CO2_ems_in = non_eu_ems_df['CO2[GtC]'].loc[1990:].values%%00010rest_of_world_CH4_ems_in = non_eu_ems_df['CH4[MtCH4]'].loc[1990:].values%%00010rest_of_world_N2O_ems_in = non_eu_ems_df['N2O[MtN2O-N]'].loc[1990:].values%%00010rest_of_world_SO2_ems_in = non_eu_ems_df['SOx[MtS]'].loc[1990:].values%%00010%%00010rest_of_world_CH4_co2_e_ems = np.zeros(2101-1990)%%00010rest_of_world_N2O_co2_e_ems = np.zeros(2101-1990)%%00010rest_of_world_SO2_co2_e_ems = np.zeros(2101-1990)%%00010%%00010for i in range(0,len(rest_of_world_CH4_co2_e_ems)):%%00010%%00009rest_of_world_N2O_co2_e_ems[i] = rest_of_world_N2O_ems_in[i] * GWP_N2O * 1.57 * 12. / 44000.%%00010%%00009%%00010%%00009if i &lt; 1:%%00010%%00009%%00009pass%%00010%%00009else:%%00010%%00009%%00009rest_of_world_SO2_co2_e_ems[i] = (rest_of_world_SO2_ems_in[i] - rest_of_world_SO2_ems_in[i-1]) * H * GWP_SO2 * 2. * 12. / 44000.%%00010%%00010%%00009if i &lt; 20:%%00010%%00009%%00009rest_of_world_CH4_co2_e_ems[i] = 0.25 * rest_of_world_CH4_ems_in[i] * GWP_CH4 * 12. / 44000. %%00010%%00009else:%%00010%%00009%%00009rest_of_world_CH4_co2_e_ems[i] = ((0.75 * (rest_of_world_CH4_ems_in[i] - np.mean(rest_of_world_CH4_ems_in[i-20:i])) * H * GWP_CH4 / 20.0) + (0.25 * rest_of_world_CH4_ems_in[i] * GWP_CH4)) * 12. / 44000. %%00010%%00010rest_of_world_total_ems = rest_of_world_CO2_ems_in + rest_of_world_CH4_co2_e_ems + rest_of_world_N2O_co2_e_ems + rest_of_world_SO2_co2_e_ems%%00010# -----------------------------------%%00010%%00010rest_of_world_cum_ems = np.cumsum(rest_of_world_total_ems)%%00010%%00010output_table = pd.DataFrame([np.arange(1990,2101),rest_of_world_total_ems,rest_of_world_cum_ems]).T%%00010output_table.columns = ['Years','RoW_ems_annual[GtC/yr]','RoW_ems_cum[GtC]']%%00010output_table.Years = output_table.Years.astype('int64').astype(str)%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Calculate RoW%%00010CO2-warming-equivalent emissions"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="1633"/>
<entry key="y-coordinate" type="xint" value="979"/>
<entry key="width" type="xint" value="174"/>
<entry key="height" type="xint" value="24"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="11"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
